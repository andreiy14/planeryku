import { useEffect, useState } from 'react';
import { planeryku_task_backend } from '../../../../../declarations/planeryku_task_backend';
import ProjectStore from '../../../store/project-store';

const useTask = () => {
  const [tasks, setTasks] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const {detailProject, categories, setCategories} = ProjectStore();
  const getCategoryName = (category) => {
    switch (category) {
    case 'readyToTest':
      return 'Ready to Test';
    case 'readyToDeploy':
      return 'Ready to Deploy';
    case 'open':
      return 'Open';
    case 'inProgress':
      return 'In Progress';
    default:
      return 'Unknown';
    }
  };

  const mapWordCategory = (category) => { 

    return category.trim().replace(" ", "_").toLowerCase();
  };
  const addTask = async (task) => {
    try {
      setIsLoading(true);
      const data = {
        name: task.name,
        status: task.category.trim().replace(" ", "_").toLowerCase(),
        description: "",
        createDate: new Date().toISOString(),
        id: "", // the id will be generated by the backend
        projectId: detailProject.id,

      };

      await planeryku_task_backend.addTasks(data);
      console.log('Task added successfully');
    } catch (error) {
      console.log('Error adding task:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const updateStatusTask = async (taskId,status) => {
    try {
      setIsLoading(true);

      const newStatus= mapWordCategory(status);
      await planeryku_task_backend.updateTaskStatus(taskId, newStatus);
      console.log('Task status updated successfully');
    } catch (error) {
      console.log('Error updating task status:', error);
    } finally {
      setIsLoading(false);
    }
  };
  const editTask = async (task) => {
    try {
      setIsLoading(true);
      const data = {
        name: task.name,
        status: task.category.trim().replace(" ", "_").toLowerCase(),
        description: "",
        createDate: new Date().toISOString(),
        taskId: task.id,
        projectId: detailProject.id,

      };
      await planeryku_task_backend.editTask(data);
      console.log('Task  updated successfully');
    } catch (error) {
      console.log('Error updating task ', error);
    } finally {
      setIsLoading(false);
    }
  };

  const getListTask = async () => {
    try {

      setIsLoading(true);
      const tasks = await planeryku_task_backend.getTasks(detailProject.id) || [];
      const dataMapping = [];
      categories.forEach( (category) => {  
        tasks.forEach( (task) => {
          if(task.status === mapWordCategory(category) ){
            dataMapping.push({...task, status : category, category});
          }
        });
      });



    

      const result = dataMapping.map((task, index) => ({
        ...task,
        order: index + 1,
        name: task.name,
        category: task.status,
        projectId : detailProject.id,

      }));



      setTasks(result);
    } catch (error) {
      console.log(error);
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {

    getListTask();
  }, [detailProject]);




  return {
    isLoading,
    tasks,
    setTasks,
    getCategoryName,
    updateStatusTask,
    addTask,
    detailProject,
    setCategories,
    categories,
    editTask,
  };
};

export default useTask;